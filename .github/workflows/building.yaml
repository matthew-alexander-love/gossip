name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro: 
          - ubuntu:20.04
          - ubuntu:22.04
          - debian:buster
          - debian:bullseye
          - centos:7
          - rockylinux:8
          - fedora:35
          - fedora:36
        python-version: ['3.8', '3.9', '3.10', '3.11']

    container:
      image: ${{ matrix.distro }}

    steps:
    - uses: actions/checkout@v3

    # Install basic requirements based on distribution
    - name: Install base requirements (Debian/Ubuntu)
      if: contains(matrix.distro, 'ubuntu') || contains(matrix.distro, 'debian')
      run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y sudo
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          python3-pip \
          python3-dev \
          build-essential \
          cmake \
          git \
          curl \
          protobuf-compiler \
          protobuf-compiler-grpc \
          libgrpc++-dev \
          libprotobuf-dev \
          libprotoc-dev \
          ninja-build \
          pybind11-dev

    - name: Install base requirements (CentOS)
      if: contains(matrix.distro, 'centos')
      run: |
        yum install -y sudo
        sudo yum install -y epel-release
        sudo yum install -y \
          python3-devel \
          gcc \
          gcc-c++ \
          make \
          cmake \
          git \
          curl \
          protobuf \
          protobuf-devel \
          protobuf-compiler \
          grpc \
          grpc-devel \
          grpc-plugins \
          ninja-build
        sudo yum install -y pybind11-devel || sudo python3 -m pip install pybind11

    - name: Install base requirements (Rocky Linux)
      if: contains(matrix.distro, 'rockylinux')
      run: |
        dnf install -y sudo
        sudo dnf install -y epel-release
        sudo dnf install -y \
          python3-devel \
          gcc \
          gcc-c++ \
          make \
          cmake \
          git \
          curl \
          protobuf \
          protobuf-devel \
          protobuf-compiler \
          grpc \
          grpc-devel \
          grpc-plugins \
          ninja-build
        sudo dnf install -y pybind11-devel || sudo python3 -m pip install pybind11

    - name: Install base requirements (Fedora)
      if: contains(matrix.distro, 'fedora')
      run: |
        dnf install -y sudo
        sudo dnf install -y \
          python3-devel \
          gcc \
          gcc-c++ \
          make \
          cmake \
          git \
          curl \
          pybind11-devel \
          protobuf \
          protobuf-devel \
          protobuf-compiler \
          grpc \
          grpc-devel \
          grpc-plugins \
          ninja-build

    - name: Set up Python
      run: |
        sudo python3 -m pip install --upgrade pip
        sudo python3 -m pip install setuptools wheel build pytest grpcio grpcio-tools

    # Build the package using setup.py with specific environment variables
    - name: Build and install package
      env:
        CMAKE_PREFIX_PATH: ${{ github.workspace }}
        PYTHON_FE_ENABLED: ON
        CMAKE_BUILD_TYPE: Release
        CMAKE_GENERATOR: Ninja
        SETUPTOOLS_CMAKE_SOURCE_DIR: ${{ github.workspace }}
        CMAKE_LIBRARY_OUTPUT_DIRECTORY: ${{ github.workspace }}/build/lib
      run: |
        # Create initial build directory
        sudo mkdir -p build
        # Run setup.py
        sudo python3 setup.py bdist_wheel

    - name: Show build artifacts
      run: |
        echo "Build directory contents:"
        ls -R build/
        echo "Dist directory contents:"
        ls -R dist/

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.distro }}-py${{ matrix.python-version }}
        path: dist/*.whl